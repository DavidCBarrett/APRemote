//
// Created to enable GSLC calls to be used from other files (unfortunately you cannot include the auto generated 
// <projectname>_GLSC.h file in more than one place in your project or you get multiple declaration erroers.)
// items are copied from autogenerated ApRemote_GSLC.h, and where needed, are changed to "extern"
//
// This file will need manually updating from ApRemote_GSLC.h if changes are made to the GUI.
//


#ifndef _GUISLICE_GEN_EXTERNS_H
#define _GUISLICE_GEN_EXTERNS_H

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include "GUIslice.h"
#include "GUIslice_drv.h"

// Include any extended elements
//<Includes !Start!>
// Include extended elements
#include "elem/XCheckbox.h"
#include "elem/XSlider.h"
#include "elem/XTextbox.h"
//<Includes !End!>

// ------------------------------------------------
// Create element storage
// ------------------------------------------------
extern gslc_tsGui                      m_gui;
extern gslc_tsDriver                   m_drv;
extern gslc_tsFont                     m_asFont[];
extern gslc_tsPage                     m_asPage[];

// ------------------------------------------------
// Program Globals
// ------------------------------------------------

// Element References for direct access
//<Extern_References !Start!>
extern gslc_tsElemRef* m_pElemBrnBaseWiFi;
extern gslc_tsElemRef* m_pElemBtnAprAuto;
extern gslc_tsElemRef* m_pElemBtnAprMinusOne;
extern gslc_tsElemRef* m_pElemBtnAprMinusTen;
extern gslc_tsElemRef* m_pElemBtnAprPlusOne;
extern gslc_tsElemRef* m_pElemBtnAprPlusTen;
extern gslc_tsElemRef* m_pElemBtnAprPortTack;
extern gslc_tsElemRef* m_pElemBtnAprStandby;
extern gslc_tsElemRef* m_pElemBtnAprStbdTack;
extern gslc_tsElemRef* m_pElemBtnAprTrack;
extern gslc_tsElemRef* m_pElemBtnAprWind;
extern gslc_tsElemRef* m_pElemBtnBaseApr;
extern gslc_tsElemRef* m_pElemBtnBaseData;
extern gslc_tsElemRef* m_pElemBtnBaseDiag;
extern gslc_tsElemRef* m_pElemBtnWifiConfigure;
extern gslc_tsElemRef* m_pElemBtnWifiReset;
extern gslc_tsElemRef* m_pElemRadioButtonAprAuto;
extern gslc_tsElemRef* m_pElemRadioButtonAprStandby;
extern gslc_tsElemRef* m_pElemRadioButtonAprTrack;
extern gslc_tsElemRef* m_pElemRadioButtonAprWind;
extern gslc_tsElemRef* m_pElemTextAprDisplay;
extern gslc_tsElemRef* m_pElemTextDataDepth;
extern gslc_tsElemRef* m_pElemTextDataHdg;
extern gslc_tsElemRef* m_pElemTextDataSog;
extern gslc_tsElemRef* m_pElemTextDataSow;
extern gslc_tsElemRef* m_pElemTextDataWDir;
extern gslc_tsElemRef* m_pElemTextDataWind;
extern gslc_tsElemRef* m_pElemTextWifiClientSSID;
extern gslc_tsElemRef* m_pElemTextWifiIp;
extern gslc_tsElemRef* m_pElemTextWifiSSID;
extern gslc_tsElemRef* m_pElemTextWifiStatus;
extern gslc_tsElemRef* m_pElemTextboxDiagLog;
extern gslc_tsElemRef* m_pElemTextboxStatus;
extern gslc_tsElemRef* m_pElemTextboxWiFiDiag;
extern gslc_tsElemRef* m_pTextSliderBaseStatus;
extern gslc_tsElemRef* m_pTextSliderDiagLog;
extern gslc_tsElemRef* m_pTextSliderWifiDiag;
//<Extern_References !End!>


// DCB's Helper functions

// A printf for GSLC Textbox elements, max 100 chars
inline void gslc_ElemXTextboxPrintf(gslc_tsGui* pGui, gslc_tsElemRef* pElemRef, const char* format, ...){
  char cOut[100];
  va_list args;

  va_start( args, format );
  vsprintf( cOut, format, args );
  va_end( args );

  gslc_ElemXTextboxAdd(pGui, pElemRef, cOut); 
};

// A printf for GSLC Txt elements, max 100 chars
// TODO: one that accepts a String might be good, similar to Serial.println
inline void gslc_ElemSetTxtPrintf(gslc_tsGui* pGui, gslc_tsElemRef* pElemRef, const char* format, ...){
  char cOut[100];
  va_list args;

  va_start( args, format );
  vsprintf( cOut, format, args );
  va_end( args );

  gslc_ElemSetTxtStr(pGui, pElemRef, cOut); 
};

#endif // _GUISLICE_GEN_EXTERNS_H