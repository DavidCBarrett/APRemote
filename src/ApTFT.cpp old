#include <Arduino.h>

//<App !Start!>
// FILE: [main.cpp]
// Created by GUIslice Builder version: [0.17.b20]
//
// GUIslice Builder Generated File
//
// For the latest guides, updates and support view:
// https://github.com/ImpulseAdventure/GUIslice
//
//<App !End!>

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include "ApTFT_GSLC.h"


// ------------------------------------------------
// Program Globals
// ------------------------------------------------

// Save some element references for direct access
//<Save_References !Start!>
gslc_tsElemRef* m_pElemBtnAuto16_26= NULL;
gslc_tsElemRef* m_pElemBtnMinusOne22_32= NULL;
gslc_tsElemRef* m_pElemBtnMinusTen23_33= NULL;
gslc_tsElemRef* m_pElemBtnPlusOne19_29= NULL;
gslc_tsElemRef* m_pElemBtnPlusTen20_30= NULL;
gslc_tsElemRef* m_pElemBtnPortTack24_34= NULL;
gslc_tsElemRef* m_pElemBtnStandby15_25= NULL;
gslc_tsElemRef* m_pElemBtnStbdTack21_31= NULL;
gslc_tsElemRef* m_pElemBtnTrack18_28= NULL;
gslc_tsElemRef* m_pElemBtnWind17_27= NULL;
gslc_tsElemRef* m_pElemDisplay2_3 = NULL;
gslc_tsElemRef* m_pElemRadioButtonAuto6_10= NULL;
gslc_tsElemRef* m_pElemRadioButtonStandby5_9= NULL;
gslc_tsElemRef* m_pElemRadioButtonTrack8_12= NULL;
gslc_tsElemRef* m_pElemRadioButtonWind7_11= NULL;
gslc_tsElemRef* m_pElemTextbox_Log3= NULL;
gslc_tsElemRef* m_pTextSliderLog  = NULL;
gslc_tsElemRef* m_pElemKeyPadAlpha= NULL;
//<Save_References !End!>

// Define debug message function
static int16_t DebugOut(char ch) { if (ch == (char)'\n') Serial.println(""); else Serial.write(ch); return 0; }

// ------------------------------------------------
// Callback Methods
// ------------------------------------------------
// Common Button callback
bool CbBtnCommon(void* pvGui,void *pvElemRef,gslc_teTouch eTouch,int16_t nX,int16_t nY)
{
  // Typecast the parameters to match the GUI and element types
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);

  if ( eTouch == GSLC_TOUCH_UP_IN ) {
    // From the element's ID we can determine which button was pressed.
    switch (pElem->nId) {
//<Button Enums !Start!>
      case E_ELEM_PAGE_LEFT:
        gslc_SetPageCur(&m_gui, E_PG_MAIN);
        break;
      case E_ELEM_BTN_PAGE_RIGHT:
        gslc_SetPageCur(&m_gui, E_PG_AP);
        break;
      case E_ELEM_TEXTINPUT3:
        // Clicked on edit field, so show popup box and associate with this text field
        gslc_ElemXKeyPadInputAsk(&m_gui, m_pElemKeyPadAlpha, E_POP_KEYPAD_ALPHA, m_pElemDisplay2_3);
        break;
      case E_ELEM_BTN25:
        break;
      case E_ELEM_BTN26:
        break;
      case E_ELEM_BTN27:
        break;
      case E_ELEM_BTN28:
        break;
      case E_ELEM_BTN29:
        break;
      case E_ELEM_BTN30:
        break;
      case E_ELEM_BTN31:
        break;
      case E_ELEM_BTN32:
        break;
      case E_ELEM_BTN33:
        break;
      case E_ELEM_BTN34:
        break;
//<Button Enums !End!>
      default:
        break;
    }
  }
  return true;
}
// Checkbox / radio callbacks
// - Creating a callback function is optional, but doing so enables you to
//   detect changes in the state of the elements.
bool CbCheckbox(void* pvGui, void* pvElemRef, int16_t nSelId, bool bState)
{
  gslc_tsGui*     pGui      = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef  = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem     = gslc_GetElemFromRef(pGui,pElemRef);
  if (pElemRef == NULL) {
    return false;
  }
  
  boolean bChecked = gslc_ElemXCheckboxGetState(pGui,pElemRef);

  // Determine which element issued the callback
  switch (pElem->nId) {
//<Checkbox Enums !Start!>

    case E_ELEM_RADIO9:
      break;
    case E_ELEM_RADIO10:
      break;
    case E_ELEM_RADIO11:
      break;
    case E_ELEM_RADIO12:
      break;
//<Checkbox Enums !End!>
    default:
      break;
  } // switch
  return true;
}
// KeyPad Input Ready callback
bool CbKeypad(void* pvGui, void *pvElemRef, int16_t nState, void* pvData)
{
  gslc_tsGui*     pGui     = (gslc_tsGui*)pvGui;
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);

  // From the pvData we can get the ID element that is ready.
  int16_t nTargetElemId = gslc_ElemXKeyPadDataTargetIdGet(pGui, pvData);
  if (nState == XKEYPAD_CB_STATE_DONE) {
    // User clicked on Enter to leave popup
    // - If we have a popup active, pass the return value directly to
    //   the corresponding value field
    switch (nTargetElemId) {
//<Keypad Enums !Start!>

      case E_ELEM_TEXTINPUT3:
        gslc_ElemXKeyPadInputGet(pGui, m_pElemDisplay2_3, pvData);
        gslc_PopupHide(&m_gui);
        break;
//<Keypad Enums !End!>
      default:
        break;
    }
  } else if (nState == XKEYPAD_CB_STATE_CANCEL) {
    // User escaped from popup, so don't update values
    gslc_PopupHide(&m_gui);
  }
  return true;
}
//<Spinner Callback !Start!>
//<Spinner Callback !End!>
//<Listbox Callback !Start!>
//<Listbox Callback !End!>
//<Draw Callback !Start!>
//<Draw Callback !End!>

// Callback function for when a slider's position has been updated
bool CbSlidePos(void* pvGui,void* pvElemRef,int16_t nPos)
{
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);
  int16_t         nVal;

  // From the element's ID we can determine which slider was updated.
  switch (pElem->nId) {
//<Slider Enums !Start!>

    case E_TXTSCROLL_LOG:
      // Fetch the slider position
      nVal = gslc_ElemXSliderGetPos(pGui,m_pTextSliderLog);
      break;
//<Slider Enums !End!>
    default:
      break;
  }

  return true;
}
//<Tick Callback !Start!>
//<Tick Callback !End!>

// void setup()
// {
//   // ------------------------------------------------
//   // Initialize
//   // ------------------------------------------------
//   Serial.begin(9600);
//   // Wait for USB Serial 
//   //delay(1000);  // NOTE: Some devices require a delay after Serial.begin() before serial port can be used

//   gslc_InitDebug(&DebugOut);

//   // ------------------------------------------------
//   // Create graphic elements
//   // ------------------------------------------------
//   InitGUIslice_gen();

// }

// // -----------------------------------
// // Main event loop
// // -----------------------------------
// void loop()
// {

//   // ------------------------------------------------
//   // Update GUI Elements
//   // ------------------------------------------------
  
//   //TODO - Add update code for any text, gauges, or sliders
  
//   // ------------------------------------------------
//   // Periodically call GUIslice update function
//   // ------------------------------------------------
//   gslc_Update(&m_gui);
    
// }

